import "platform:/resource/GlossarDocumentation/model/glossarDocumentation.ecore" as testImport 

config(){
	home="C:/test/" 
} 

gen forRangeTest(){
	var container = createContainer() 
	for i in 1:10 {
		createDocInContainer(container, "doc"+i)
	}
	
	return container
}
 
gen ifElseSwitchTest1(){   
	var container = createContainer() 
	for number in -3:3 {   
		switch {
			when number > 0: createDocInContainer(container, "doc"+number)
			when number < 0: createDocInContainer(container, "doc"+(-number))
			default: createDocInContainer(container, "docNull")
		}  
	}   
	return container	
}      

gen ifElseSwitchTest2(){
	var container = createContainer()
	List l1 = ["a", "b", "c", "d", "e"]
	
	for i in 0:9 {
		switch {
			when i % 2 == 0: createDocInContainer(container, l1.get(i/2))
			when i % 2 != 0: createDocInContainer(container, i)     
		}
	}
	return container
}


gen castTest(){
	var container = createContainer()
	List entsAndDocs 
	var entryPrefix = "entry"  
	var docPrefix = "doc"  
 
	for i in 0:9 {
		container = createContainer()
		switch {
			when i % 2 == 1: entsAndDocs.add(createEntry(entryPrefix + i))
			when i % 2 == 0: entsAndDocs.add(createDoc(docPrefix + i))
		}
	}
	
	var docIt = createDoc("")
	for i in 0:9{
		switch (entsAndDocs.get(i)) {
			case Document doc: {
				docIt = addDocToContainer(container, doc)
			}
			case Entry e: {
				addEntryToDocument(e, docIt)
			}
		}
	} 
	return container
}

pattern createEntry(String entryName){
	Entry e { 
		name = entryName        
	}
} return this.e  
  
pattern createDoc(String docName){  
	Document doc { 
		name = docName    
	}
} return this.doc

pattern addEntryToDocument(Entry e, Document doc){
	doc {
		entries -> e 
	}
}

pattern addDocToContainer(DocumentationContainer container, Document doc){
	container {
		documents -> doc 
	}
} return doc    

pattern createContainer(){
	DocumentationContainer container
} return this.container

pattern createDocInContainer(DocumentationContainer container, String docName){  
	container { 
		documents -> doc
	}
	Document doc {
		name = docName
	}
} return this.doc