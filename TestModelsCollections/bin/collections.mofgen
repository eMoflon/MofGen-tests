import "platform:/resource/GlossarDocumentation/model/glossarDocumentation.ecore" as testImport 

config(){
	home="C:/test/" 
} 

gen listTest(){
	List l1 = ["DocUno", "DocDeux", "DocTrois"]
	var container = createContainer()
	
	for name in l1 {
		addDocToContainer(container, name)  
	}
	
	return container
} 

gen listAddTest(){
	List l1 of String
	l1.add("Ich")
	l1.add("bin")
	List l2 = ["Teil", "eines", "vollstÃ¤ndigen", "und", "fehlerfreien"]
	l1.addAll(l2)   
	l1.add("Satzes.") 
	 
	var container = createContainer()
	for name in l1 {
		addDocToContainer(container, name)  
	}
	  
	return container
}

gen mapPutTest(){  
	Map m1 of (Integer, String)
	m1.put(1, "Du")   
	m1.put(2, "bin")   
	m1.put(3, "Teil")
	m1.put(4, "eines") 
	m1.put(5, "Satzes")   
	m1.put(1, "Ich")  
	 
	var container = createContainer()
	for m1-entries->name {   
		addDocToContainer(container, name)  
	}
	
	for m1-keys->name { 
		addDocToContainer(container, name)      
	}
	  
	return container
}

gen mapTestEntries(){
	Map m1 = [("one", "DocUno"), ("two", "DocDeux"), ("three", "DocTrois")] 
		var container = createContainer()
	
	for m1-entries->name {
		addDocToContainer(container, name)         
	}
	
	return container  
}

gen mapTestKeys(){
	Map m1 = [("one", "DocUno"), ("two", "DocDeux"), ("three", "DocTrois")] 
		var container = createContainer()
	
	for m1-keys->name {
		addDocToContainer(container, name)          
	}
	
	return container
}


pattern createContainer(){
	DocumentationContainer container
} return this.container

pattern addDocToContainer(DocumentationContainer container, String docName){
	container { 
		documents -> doc
	}
	Document doc {
		name = docName
	}
}