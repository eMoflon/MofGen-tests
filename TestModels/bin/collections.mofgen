import "platform:/resource/GlossarDocumentation/model/glossarDocumentation.ecore" as testImport 

config(){   
}      
 
gen listTest(){
	List l1 = ["DocUno", "DocDeux", "DocTrois"]  
	var container = createContainer()
	for name in l1 {
		addDocToContainer(container, name)  
	}      
	return container    
}     

gen listAddAllTest(){
	List l1 = ["DocUno", "DocDeux", "DocTrois"]  
	List l2 of String  
	l2.addAll(l1)  
	   
	var container = createContainer()
	
	for name in l1 {
		addDocToContainer(container, name)  
	}      
	return container    
}    

gen listRemoveTest1(){
	List l1 = ["DocUno", "DocDeux", "DocTrois"]  
	var container = createContainer()
	l1.removeAt(1)
	for name in l1 {
		addDocToContainer(container, name)  
	}  
	
	return container    
} 

gen listRemoveTest2(){
	List l1 = ["DocUno", "DocDeux", "DocTrois"]  
	var container = createContainer()
	l1.remove(l1.get(1))
	for name in l1 {
		addDocToContainer(container, name)  
	}
	
	return container   
}

gen listContainsTest(){
	List l1 = ["DocUno", "DocDeux", "DocTrois"]  
	switch {
		when l1.contains("DocDeux"): return createDoc("dolittle")
		default: return createDoc("wrong")
	}
}

gen listIndexOfTest(){
	List l1 = ["DocUno", "DocDeux", "DocTrois"]  
 	return createDoc("dolittle"+l1.indexOf(l1.get(1)))
}

gen listEmptyTest1(){
	List l1 = ["DocUno", "DocDeux", "DocTrois"]  
	switch {
		when l1.isEmpty(): return createDoc("wrong")
	}
 	return createDoc("dolittle")
}
gen listEmptyTest2(){
	List l1 = []  
	switch {
		when l1.isEmpty(): return createDoc("dolittle")
	}
 	return createDoc("wrong")
}
gen listEmptyTest3(){
	List l1 = []   
	switch {
		when l1 == none: return createDoc("dolittle")
	}
 	return createDoc("wrong")
}

gen listAddTest(){ 
	List l1 of String 
	l1.add("Ich")  
	l1.add("bin")
	List l2 = ["Teil", "eines", "vollstÃ¤ndigen", "und", "fehlerfreien"] 
	l1.addAll(l2)    
	l1.add("Satzes.") 
	
	var container = createContainer()
	for name in l1 {
		addDocToContainer(container, name)  
	}
	  
	return container
}

gen listSizeTest(){
	List l1 = [0, 1, 2, 3, 4, 5, 6, 7]
	var container = createContainer()
	addDocToContainer(container, "doc"+l1.size())
	
	return container
}


gen mapSizeTest(){
	Map m1 =  [(1, "Du"), (2, "bin"), (3, "Teil"), (4, "eines"), (5, "Satzes")]  
	var container = createContainer()
	addDocToContainer(container, "doc"+m1.size())
	
	return container
}

gen mapPutTest(){  
	Map m1 of (Integer, String)
	m1.put(1, "Du")         
	m1.put(2, "bin")        
	m1.put(3, "Teil")   
	m1.put(4, "eines")    
	m1.put(5, "Satzes")     
	m1.put(1, "Ich")   
	 
	var container = createContainer()
	for m1-entries->name {     
		addDocToContainer(container, name)  
	}
	
	for m1-keys->name { 
		addDocToContainer(container, name)      
	}
	   
	return container
}

gen mapContainsKeyTest(){
	Map m1 = [("one", "DocUno"), ("two", "DocDeux"), ("three", "DocTrois")] 
	
	switch (m1.containsKey("three")){
		case true: return createDoc("dolittle")
		default: return createDoc("wrong")
	}
}

gen mapRemoveTest(){
	Map m1 = [("one", "DocUno"), ("two", "DocDeux"), ("three", "DocTrois")] 
	m1.remove("two")
	
	var container = createContainer()
	
	for m1-entries->name {
		addDocToContainer(container, name)         
	}
	
	return container  
}

gen mapContainsValueTest(){
		Map m1 = [("one", "DocUno"), ("two", "DocDeux"), ("three", "DocTrois")] 
	
	switch (m1.containsValue("DocDeux")){
		case true: return createDoc("dolittle")
		default: return createDoc("wrong")
	}  
} 

gen mapEmptyTest1(){
	Map m1 = [("one", "DocUno"), ("two", "DocDeux"), ("three", "DocTrois")] 
	
	switch (m1.isEmpty()){
		case true: return createDoc("wrong")
		default: return createDoc("dolittle")
	}  
}  

gen mapEmptyTest2(){
	Map m1 = [] 
	
	switch (m1.isEmpty()){
		case true: return createDoc("dolittle")
		default: return createDoc("wrong")
	}  
} 
 
gen mapEmptyTest3(){
	Map m1 = [] 
	
	switch {
		when m1 == none: return createDoc("dolittle")
		default: return createDoc("wrong")
	}  
} 


gen mapTestEntries(){
	Map m1 = [("one", "DocUno"), ("two", "DocDeux"), ("three", "DocTrois")] 
		var container = createContainer()
	
	for m1-entries->name {
		addDocToContainer(container, name)         
	}
	
	return container  
}

gen mapTestKeys(){
	Map m1 = [("one", "DocUno"), ("two", "DocDeux"), ("three", "DocTrois")] 
		var container = createContainer()
	
	for m1-keys->name {
		addDocToContainer(container, name)          
	}
	
	return container
}

gen listTestObjects(){
	var container = createContainer()
	List l1 of Document
	
	for i in 0:9 {
		l1.add(createDoc("doc"+1))
	}
	
	for i in 0:9 {
		switch{
			when i % 2 == 0: addDocObjectToContainer(container, l1.get(i))
		}
	}
	
	return container
}

gen mapTestObjects(){
	var container = createContainer()
	
	Map m1 of (Document, Document)
	List docList of Document
	
	var doc = createDoc("doc"+0)
	var nextDoc = createDoc("")
	for i in 1:9 {
		nextDoc = doc
		doc = createDoc("doc"+ 7 * i)
		docList.add(doc)
		m1.put(doc, nextDoc)   
	}
	
	for docIt in docList {
		addDocObjectToContainer(container, m1.get(docIt))
	}
	
	return container
}

gen nullOnListTest1(){
	var container = createContainer()
	List docList of String 
	switch{
		when docList == none:	addDocToContainer(container, "dolittle")
		default:				addDocToContainer(container, docList.get(0))
	} 
	
	return container
}  
   
gen nullOnListTest2(){     
	var container = createContainer()
	List docList of String 
	docList.add("dolittleX")
	docList.add("dolittleX")   
	docList.add("dolittle") 
	docList.add("dolittleX")
	switch{ 
		when docList == none:	addDocToContainer(container, "dolittleX")
		default:				addDocToContainer(container, docList.get(2))
	}
	
	return container
}

pattern createContainer(){
	DocumentationContainer container
} return this.container

pattern addDocToContainer(DocumentationContainer container, String docName){
	container { 
		documents -> doc
	}
	Document doc {
		name = docName
	}
}

pattern addDocObjectToContainer(DocumentationContainer container, Document doc){
	container {
		documents -> doc
	}
}

pattern createDoc(String docName){
	Document doc{
		name = docName
	}
}return doc