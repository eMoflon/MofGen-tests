import "platform:/resource/GlossarDocumentation/model/glossarDocumentation.ecore" as testImport 

config(){
	home="C:/test/" 
} 

gen testForLoop(){     
	var container = containerCreation()
	var docName = "IchBinDoc" 
	
	for i in 0:9 {   
		addDocToContainer(container, docName + i)
	}           
	   
	return container    
}    
    
gen testPattern1(){
	var container = containerCreation()
	var docName = "IchBinDoc"  
	       
	for i in 0:10 {
		addDocToContainerWithEntries(container, docName, i)
	}  
	     
	return container   
}
 
gen testOrdering(){
	var container = containerCreation()
	ordering(container) 
	return container
} 

gen testSettingEnum(){
	var entry = entryWithEnum()
	return entry
}
  
gen testPatternCallReturn(){
	return containerCreation()
}

gen testPatternWithinPattern(){
	var container = containerWithDocuments(10)
	return container
}

gen testVariableManipulation(){
	var container = containerCreation()
	
	var testNumber = 0 // TODO EValidator errors when changing to e.g. container
	var testString = "test"    
	addDocToContainer(container, testString + testNumber)  
	 
	testNumber = (testNumber + 2) * 5 
	testString = testString + "itest"
	addDocToContainer(container, testString + testNumber) 
	
	return container  
}

gen testPatternObjectAccess(){ 
	var patternObject = createDocumentAsPatternObject("docName") 	 
	return patternObject.doc         
} 

gen testPatternObjectAsParameter(){
	var docPattern  = createDocumentAsPatternObject("docName") 	
	return createContainerWithDocument(docPattern)
}
 
gen testPatternObjectMultipleRefCalls(){   
	var docPattern  = createDocumentAsPatternObject("docName") 	
	return createDocument(docPattern.doc.name) 
}

pattern createContainerWithDocument(createDocumentAsPatternObject docPattern){
	DocumentationContainer container {
		documents -> docPattern.doc
	}
} return this.container

pattern createDocumentAsPatternObject(String name){
	Document doc {
		name = name
	} 
} return this
 
pattern containerWithDocuments(int docNumber){
	DocumentationContainer container {
		for i in 1:docNumber {
			documents -> createDocument("doc"+docNumber)
		}
	}
} return this.container

pattern createDocument(String name){
	Document doc {
		name = name    
	} 
} return this.doc

gen testThis1(){
	var doc = createDocument("IDoNotWantToBeHere")
	return testThisDoc1(doc, "IAmGladToBeHere")
}

pattern testThisDoc1(Document doc, String name){
	Document doc {
		name = name
	}
} return this.doc

gen testThis2(){  
	var doc = createDocument("IAmGladToBeHere")
	return testThisDoc2(doc, "IDoNotWantToBeHere")
} 

pattern testThisDoc2(Document doc, String name){
	Document doc {
		name = name
	}
} return doc
 //TODO test 'this' operator

pattern createDocNameFromDoc(Document doc){
	Document doc {
		name = doc.name    
	}
	Document doc2 {
		name = this.doc.name  
	}
} return this.doc // TODO test 

pattern entryWithEnum(){
	Entry e {
		type = testImport.EntryType.METHOD
	}
} return this.e

pattern ordering(DocumentationContainer container){
	container{
		documents -> doc
	}
	Document doc{
		name = e.name   
		entries -> e
	}
	Entry e { 
		name = "WennIchEinDocBinWÃ¤reichLieberEinEntry"   
		type = testImport.EntryType.METHOD
	}
}
 
pattern addDocToContainer(DocumentationContainer container, String name){ 
	container {
		documents->doc       
	} 
	Document doc{ 
		name = name
	} 
} return this.doc 
 
pattern addDocToContainerWithEntries(DocumentationContainer container, String docName, int i){ 
	container { 
		documents->doc      
	} 
	Document doc = createDocWithEntries(docName, i, "ChildOf_" + docName)  
} return this.doc

pattern createDocWithEntries(String docName, int entryNumber, String entryName){ 
	Document doc {
		name = docName
		for i in 0 : entryNumber{     
			entries->createEntry(entryName, entryNumber)               
		}
	}
} return this.doc 

pattern createEntry(String entryName, int number){
	Entry entry {
		name = entryName + number   
	}
} return this.entry

pattern containerCreation() {
	DocumentationContainer container
} return this.container